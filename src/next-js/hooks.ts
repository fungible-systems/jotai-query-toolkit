import { useMemo } from 'react';
import { hashQueryKey } from 'react-query';
import type { QueryClient, QueryKey } from 'react-query';
import type { Atom } from 'jotai';
import { queryClientAtom } from 'jotai/query';

import { initialDataAtom } from '../atoms/intitial-data-atom';
import { queryClient } from '../query-client';

/**
 * useQueryInitialValues
 *
 * This hook is made to be used on next.js pages only to provide the initial data for our query atoms
 *
 * ```typescript
 * const queryKeys = [SomeEnum.SomeKey];
 * const props = { '["SomeEnum.SomeKey"]': { foo: 'bar' } }; // this will be autogenerated via {@link getOrFetchInitialQueries}`
 * const initialValues = useQueryInitialValues(queryKeys, props);
 * ```
 *
 * @param queryKeys - an array of react-query query keys.
 * @param props - the data generated from {@link getOrFetchInitialQueries}, should not be created manually.
 * @param customQueryClient - an optional query client that will be automatically used in all queries under the Jotai <Provider> these initial values are passed to.
 */
export function useQueryInitialValues(
  queryKeys: QueryKey[],
  props: Record<string, unknown>,
  customQueryClient?: QueryClient
) {
  return useMemo(
    () =>
      [
        ...queryKeys.map(
          queryKey => [initialDataAtom(queryKey), props[hashQueryKey(queryKey)]] as const
        ),
        [queryClientAtom, customQueryClient || queryClient] as const,
      ] as Iterable<readonly [Atom<unknown>, unknown]>,
    [queryKeys, props]
  );
}
